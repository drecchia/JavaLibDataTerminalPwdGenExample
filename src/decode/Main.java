package decode;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;

public class Main {

	public interface libPwdGen extends Library {
		
		//---------------------------------------------------------------------------
		//-- Defines
		/*#define SINT8 char
		#define uint8 unsigned char
		#define uint16 unsigned short
		#define SINT16 short
		#define uint32 unsigned int
		#define SINT32 int
		#define SINT64 long long
		#define uint64 unsigned long long*/

		//---------------------------------------------------------------------------
		
		/*
		 *  DLLFUNCTION unsigned char CALL DecodeMTC500KeyDll(uint32 module_id, uint32 key, uint32 * password);
		 *  DLLFUNCTION unsigned char CALL DecodeMTC550KeyDll(uint32 client, uint64 esn, uint32 module_id, uint8 * key, uint8 * key2, uint8 * key3, uint8 remove_input_sec, uint8 remove_output_sec, uint8 deactive_actions, uint8 protocol, uint32 * reverse_password);
		 *  DLLFUNCTION unsigned char CALL InfoMTC550KeyDll(uint32 client, uint64 esn, uint32 module_id, uint8 * key, uint8 * key2, uint8 * key3,  double *latitude, double *longitude, uint8 * day, uint8 * hour, uint8 * minute, uint8 * alarm, uint8 * io_type, uint8 * io_number, uint8 * key_type);
		 */
		
		/**
		@param module_id[in] - Device serial.
		@param key[in] - Key shown by TD
		@param password[out] - reverse password generated by lib
		*/
		public char DecodeMTC500KeyDll(int module_id, byte[] key, IntByReference password);
		
		/**
		 @param[in] client - Client_id in device
		 @param esn[in] - Imei for device
		 @param module_id[in] - device serial
		 @param key1[in] - First key shown by TD
		 @param key2[in] - Second key shown by TD
		 @param key3[in] - Third key shown by TD
		 @param remove_input_sec[in] - force remotion of security of all inputs (protocol = 0) / alarm deactivate (protocol = 1) [possible values 0~1]
		 @param remove_output_sec[in] - force remotion of security of all outputs (protocol = 0) / alarm deactivate (protocol = 1) [possible values 0~1]
		 @param deactive_actions[in] - option to deactivate all client embedded actions in device (protocol = 1)
		 @param protocol[in] - actions type. [possible values: 0 - Security state of all I/O; 1 - Alarm state]
		 @param reverse_password[out] - reverse password generated by lib
		 **/
		public char DecodeMTC550KeyDll(int client, long esn, long module_id, byte[] key1, byte[] key2, byte[] key3, byte remove_input_sec, byte remove_output_sec, byte deactive_actions, byte protocol, IntByReference reverse_password);
		
		/**
		@param[in] client - Client_id in device
		@param esn[in] - Imei for device
		@param module_id[in] - device serial
		@param key[in] - First key shown by TD
		@param key[in] - Second key shown by TD
		@param key[in] - Third key shown by TD
		@param latitude[out] - Latitude where the key was generated
		@param longitude[out] - LONGITUDE where the key was generated
		@param day[out] - Day where the key was generated
		@param hour[out] - Hour where the key was generated
		@param minute[out] - Minute where the key was generated
		@param alarme[out] - Alarm change request
		@param io_type[out] - i-o type change [0 - input; 1 - output]
		@param io_number[out] - Output index requested [1 ~ 8 = I/O, 9 = Alarm]
		@param key_type[out] - KEY TYPE (0 - mtc550; 1 - mtc700)
		*/
		public char InfoMTC550KeyDll(int client, long esn, long module_id, byte[] key1, byte[] key2, byte[] key3, DoubleByReference latitude, DoubleByReference longitude, IntByReference day, IntByReference hour, IntByReference minute, IntByReference alarm, IntByReference io_type, IntByReference io_number, IntByReference key_type);
	}
	
	public static void testMTC500(libPwdGen nm)
	{
		IntByReference pass = new IntByReference();
		byte[] key1 = "DXR8T".getBytes();
		
		nm.DecodeMTC500KeyDll(1, key1, pass);
		String hexStr = Integer.toString(Integer.valueOf(pass.getValue()),16);
		System.out.println("Reverse password for mtc 500: " + hexStr);
	}
	
	public static void testmtc550KeyInfo(libPwdGen nm)
	{
		byte[] key1 = "DXR8T".getBytes();
		byte[] key2 = "1X6OS".getBytes();
		byte[] key3 ="0NYIO".getBytes();
		
		DoubleByReference lat = new DoubleByReference();
		DoubleByReference lng = new DoubleByReference();
		
		IntByReference day = new IntByReference();
		IntByReference hour = new IntByReference();
		IntByReference minute = new IntByReference();
		IntByReference alarm = new IntByReference();
		IntByReference io_type = new IntByReference();
		IntByReference io_number = new IntByReference();
		IntByReference key_type = new IntByReference();
		
		
		//nm.InfoMTC550KeyDll(client, esn, module_id, key1, key2, key3, latitude, longitude, day, hour, minute, alarm, io_type, io_number, key_type);
		nm.InfoMTC550KeyDll(55, 355371024423044L, 833152L, key1, key2, key3, lat, lng, day, hour, minute, alarm, io_type, io_number, key_type);
		
		System.out.println("Information of mtc 550/700 key-> lat: " + lat.getValue() + " long: " + lng.getValue() + " day: " + day.getValue() + " day: " + day.getValue() + " hour: " + hour.getValue() + " minute: " + minute.getValue() + " alarm: " + day.getValue() + " io_type: " + io_type.getValue() + " io_numbber: " + io_number.getValue() + " key_type: " + key_type.getValue());
	}
	
	public static void testMTC550(libPwdGen nm)
	{
		byte[] key1 = "DXR8T".getBytes();
		byte[] key2 = "1X6OS".getBytes();
		byte[] key3 ="0NYIO".getBytes();
		IntByReference pass = new IntByReference();
		
		testmtc550KeyInfo(nm);
		
		nm.DecodeMTC550KeyDll(55, 355371024423044L, 833152L, key1, key2, key3, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01, pass);
	    String hexStr = Integer.toString(Integer.valueOf(pass.getValue()),16);
	    System.out.println("Reverse password for mtc 550/700: " + hexStr);
	}

	public static void main(String[] args) {
		libPwdGen nm = (libPwdGen) Native.loadLibrary("C:/Maxtrack/Maxtrack_Gateway/libs/libDataTerminalPwdGen.dll", libPwdGen.class);
		
		testMTC500(nm);
		testMTC550(nm);
	}

}
